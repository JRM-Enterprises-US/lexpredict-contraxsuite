# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-11-23 11:45
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations
from django.db.models import Value, F
from django.db.models.functions import Concat


def assign_document_type_field_values(field, document_type_field):
    # Lets assign field manually to exclude bugs in future
    field.category = document_type_field.category
    field.training_finished = document_type_field.training_finished
    field.dirty = document_type_field.dirty
    field.order = document_type_field.order
    field.trained_after_documents_number = document_type_field.trained_after_documents_number
    return field


def copy_depends_on_fields(old_field, new_field):
    depends_on_fields = [field for field in old_field.depends_on_fields.all()]
    new_field.depends_on_fields.set(depends_on_fields)


def clone_field(apps, field, new_document_type):
    DocumentField = apps.get_model('document', 'DocumentField')
    # Lets clone field manually to exclude bugs in future
    return DocumentField(
        document_type=new_document_type,
        code=field.code,
        title=field.title,
        description=field.description,
        type=field.type,
        text_unit_type=field.text_unit_type,
        value_detection_strategy=field.value_detection_strategy,
        python_coded_field=field.python_coded_field,
        classifier_init_script=field.classifier_init_script,
        formula=field.formula,
        value_regexp=field.value_regexp,
        confidence=field.confidence,
        requires_text_annotations=field.requires_text_annotations,
        read_only=field.read_only,
        choices=field.choices,
        stop_words=field.stop_words,
        metadata=field.metadata,
        created_by=field.created_by,
        modified_by=field.modified_by,
        tmp_source_field=field,
    )


def set_field_for_values(apps, document_type, old_field, new_field):
    DocumentFieldValue = apps.get_model('document', 'DocumentFieldValue')
    HistoricalDocumentFieldValue = apps.get_model('document', 'HistoricalDocumentFieldValue')
    ExternalFieldValue = apps.get_model('document', 'ExternalFieldValue')
    DocumentFieldValue.objects.filter(document__document_type=document_type, field=old_field).update(field=new_field)
    HistoricalDocumentFieldValue.objects \
        .filter(document__document_type=document_type, field=old_field) \
        .update(field=new_field)
    ExternalFieldValue.objects.filter(type_id=document_type.pk, field_id=old_field.pk).update(field_id=new_field.pk)


def clone_target_field(apps, document_type_field):
    ClassifierModel = apps.get_model('document', 'ClassifierModel')
    DocumentFieldDetector = apps.get_model('document', 'DocumentFieldDetector')
    old_field = document_type_field.document_field
    document_type = document_type_field.document_type

    new_field = clone_field(apps, old_field, document_type)
    new_field = assign_document_type_field_values(new_field, document_type_field)
    document_type_field.document_field = new_field
    new_field.save()
    copy_depends_on_fields(old_field=old_field, new_field=new_field)
    document_type_field.save()

    set_field_for_values(apps, document_type, old_field, new_field)

    DocumentFieldDetector.objects.filter(document_type=document_type, field=old_field).update(field=new_field)

    ClassifierModel.objects\
        .filter(document_type=document_type, document_field=old_field)\
        .update(document_field=new_field)

    return old_field.pk, new_field.pk


def migrate_field_data(field, document_type_field):
    field = assign_document_type_field_values(field, document_type_field)
    field.document_type = document_type_field.document_type
    field.save()


def fix_document_type_conflicts(apps):
    DocumentFieldDetector = apps.get_model('document', 'DocumentFieldDetector')
    ClassifierModel = apps.get_model('document', 'ClassifierModel')
    DocumentField = apps.get_model('document', 'DocumentField')
    DocumentTypeField = apps.get_model('document', 'DocumentTypeField')

    for document_field_detector in DocumentFieldDetector.objects.exclude(document_type=F('field__document_type')):
        document_type = document_field_detector.document_type
        if document_field_detector.field.document_type is not None:
            old_field = document_field_detector.field
            new_field = None
            for field in DocumentField.objects.filter(code=old_field.code, document_type=None):
                new_field = field
                break
            if new_field is None:
                new_field = clone_field(apps, old_field, None)
                new_field.save()
                copy_depends_on_fields(old_field=old_field, new_field=new_field)

            document_field_detector.field = new_field
            document_field_detector.save()

            if document_type and DocumentTypeField.objects\
                    .filter(document_type=document_type, document_field=old_field).count() <= 0:
                set_field_for_values(apps, document_type, old_field, new_field)

    ClassifierModel.objects.filter(document_field=None).delete()
    for model in ClassifierModel.objects.exclude(document_type=F('document_field__document_type')):
        document_type = model.document_type
        if model.document_field.document_type is not None:
            old_field = model.document_field
            new_field = None
            for field in DocumentField.objects.filter(code=old_field.code, document_type=None):
                new_field = field
                break
            if new_field is None:
                new_field = clone_field(apps, old_field, None)
                new_field.save()
                copy_depends_on_fields(old_field=old_field, new_field=new_field)

            model.document_field = new_field
            model.save()

            if document_type and not DocumentTypeField.objects\
                    .filter(document_type=document_type, document_field=old_field).count() <= 0:
                set_field_for_values(apps, document_type, old_field, new_field)


def generate_long_code(apps):
    DocumentType = apps.get_model('document', 'DocumentType')
    DocumentField = apps.get_model('document', 'DocumentField')
    for document_type in DocumentType.objects.all():
        DocumentField.objects\
            .filter(document_type=document_type)\
            .update(long_code=Concat(Value(document_type.code + ': '), F('code')))

    DocumentField.objects.filter(document_type=None).update(long_code=F('code'))


def convert_document_type_fields(apps, schema_editor):
    DocumentTypeField = apps.get_model('document', 'DocumentTypeField')
    DocumentType = apps.get_model('document', 'DocumentType')
    DocumentField = apps.get_model('document', 'DocumentField')
    Document = apps.get_model('document', 'Document')

    processed_field_ids = set()
    cloned_fields_by_document_type_id = {}
    for document_type_field in DocumentTypeField.objects.all():
        field = document_type_field.document_field
        document_type = document_type_field.document_type

        if document_type is None or field is None:
            continue
        if field.document_type is None and field.pk not in processed_field_ids:
            migrate_field_data(document_type_field.document_field, document_type_field)
        elif field.pk in processed_field_ids and (field.document_type is None or
                                                  field.document_type.pk != document_type.pk):
            old_field_pk, new_field_pk = clone_target_field(apps, document_type_field)
            cloned_fields = cloned_fields_by_document_type_id.get(document_type.pk)
            if not cloned_fields:
                cloned_fields = []
                cloned_fields_by_document_type_id[document_type.pk] = cloned_fields
            cloned_fields.append((old_field_pk, new_field_pk))
        processed_field_ids.add(document_type_field.document_field.pk)

    for document_type_pk, cloned_fields in cloned_fields_by_document_type_id.items():
        for old_field_pk, new_field_pk in cloned_fields:

            DocumentType.search_fields.through.objects\
                .filter(documenttype_id=document_type_pk, documentfield_id=old_field_pk)\
                .update(documentfield_id=new_field_pk)

            DocumentField.depends_on_fields.through.objects \
                .filter(from_documentfield__document_type__pk=document_type_pk, to_documentfield_id=old_field_pk) \
                .update(to_documentfield_id=new_field_pk)

            Document.objects.filter(document_type__pk=document_type_pk).update(tmp_dirty=True)

    fix_document_type_conflicts(apps)

    generate_long_code(apps)


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('document', '0106_new_schema_document_type_fields_to_1_n'),
        ('project', '0029_auto_20181102_1910')
    ]

    operations = [
        migrations.RunPython(convert_document_type_fields, reverse_code=migrations.RunPython.noop),
    ]
