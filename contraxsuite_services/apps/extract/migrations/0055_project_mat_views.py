# Generated by Django 2.2.10 on 2020-05-13 06:59

from django.db import migrations, models, connection
import django.db.models.deletion


def create_managed_views(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute('''

        CREATE MATERIALIZED VIEW extract_projecttermusage (project_id, term_id, count)
            AS SELECT 
            dd.project_id, 
            etu.term_id, 
            SUM(etu.count)
            FROM extract_termusage etu
            INNER JOIN document_textunit dtu ON etu.text_unit_id=dtu.id
            INNER JOIN document_document dd ON dtu.document_id=dd.id
            LEFT OUTER JOIN project_project pp ON dd.project_id=pp.id 
            GROUP BY dd.project_id, pp.id, etu.term_id
            ORDER BY pp.id ASC, etu.term_id ASC
            WITH DATA;

        CREATE MATERIALIZED VIEW extract_projectgeoentityusage (project_id, entity_id, count)
            AS SELECT 
            dd.project_id, 
            egu.entity_id, 
            SUM(egu.count)
            FROM extract_geoentityusage egu
            INNER JOIN document_textunit dtu ON egu.text_unit_id=dtu.id
            INNER JOIN document_document dd ON dtu.document_id=dd.id
            LEFT OUTER JOIN project_project pp ON dd.project_id=pp.id 
            GROUP BY dd.project_id, pp.id, egu.entity_id
            ORDER BY pp.id ASC, egu.entity_id ASC
            WITH DATA;

        CREATE MATERIALIZED VIEW extract_projectpartyusage (project_id, party_id, count)
            AS SELECT 
            dd.project_id, 
            epu.party_id, 
            SUM(epu.count)
            FROM extract_partyusage epu
            INNER JOIN document_textunit dtu ON epu.text_unit_id=dtu.id
            INNER JOIN document_document dd ON dtu.document_id=dd.id
            LEFT OUTER JOIN project_project pp ON dd.project_id=pp.id 
            GROUP BY dd.project_id, pp.id, epu.party_id
            ORDER BY pp.id ASC, epu.party_id ASC
            WITH DATA;

        CREATE MATERIALIZED VIEW extract_projectdefinitionusage (project_id, definition, count)
            AS SELECT 
            dd.project_id, 
            edu.definition, 
            SUM(edu.count)
            FROM extract_definitionusage edu
            INNER JOIN document_textunit dtu ON edu.text_unit_id=dtu.id
            INNER JOIN document_document dd ON dtu.document_id=dd.id
            LEFT OUTER JOIN project_project pp ON dd.project_id=pp.id 
            GROUP BY dd.project_id, pp.id, edu.definition
            ORDER BY pp.id ASC, edu.definition ASC
            WITH DATA;

        ''')


def drop_managed_views(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute('''
        DROP MATERIALIZED VIEW extract_projectdefinitionusage;
        DROP MATERIALIZED VIEW extract_projectgeoentityusage;
        DROP MATERIALIZED VIEW extract_projectpartyusage;
        DROP MATERIALIZED VIEW extract_projecttermusage;
        ''')


class Migration(migrations.Migration):

    dependencies = [
        ('extract', '0054_systemwidedefinitionusage_systemwidegeoentityusage_systemwidepartyusage_systemwidetermusage'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectDefinitionUsage',
            fields=[
                ('count', models.IntegerField(db_index=True, default=0)),
                ('definition', models.TextField(db_index=True, primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'abstract': False,
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectGeoEntityUsage',
            fields=[
                ('count', models.IntegerField(db_index=True, default=0)),
                ('entity', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='extract.GeoEntity')),
            ],
            options={
                'abstract': False,
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectPartyUsage',
            fields=[
                ('count', models.IntegerField(db_index=True, default=0)),
                ('party', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='extract.Party')),
            ],
            options={
                'abstract': False,
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectTermUsage',
            fields=[
                ('count', models.IntegerField(db_index=True, default=0)),
                ('term', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='extract.Term')),
            ],
            options={
                'abstract': False,
                'managed': False,
            },
        ),

        migrations.RunPython(create_managed_views, reverse_code=drop_managed_views)

    ]
